function [ omega,acc_error ] = pid_controller( x,xd, acc_error)
%UNTITLED5 此处显示有关此函数的摘要
%   x xd
global KpZ KiZ KdZ KpPhi KiPhi KdPhi KpTheta KiTheta KdTheta KpPsi KiPsi KdPsi KpX KiX KdX KpY KiY KdY
global Ixx Iyy Izz Jtp ct cq l m g h Kr Kparas omegaMax omegaMin
global allocation_matrix allocation_matrix_inv
global gamma
global Phid Thetad

if nargin == 2
    gamma = 0;
end

%% variables
Zd = xd(5);
Psid = xd(11);

phi = x(7);
theta = x(9);
psi = x(11);

error = xd - x;
acc_error = gamma .* acc_error + error;

%% Position controller
xe_b = error(1) * cos(psi) + error(3) * sin(psi); % x error in body frame
ye_b = -error(1) * sin(psi) + error(3) * cos(psi); % y error in body frame
vxe_b = error(2) * cos(psi) + error(4) * sin(psi); % x error in body frame
vye_b = -error(2) * sin(psi) + error(4) * cos(psi); % y error in body frame

Thetad = KpX * xe_b + KdX * vxe_b;
Phid = KpY * ye_b + KdY * vye_b;

if abs(Thetad) >pi/6 % regulate desire angle
    Thetad = pi/6 * sign(Thetad);
end

if abs(Phid) >pi/6
    Phid = pi/6 * sign(Phid);
end

error = xd - x;
acc_error = gamma .* acc_error + error;

%% calulate attitude PD control signal
U = zeros(4,1);    % The control vector
% use U(1) to complement Z error,
% U(1) = (m * g + m * [KpZ KdZ] * error(5:6)) / (cos(phi) * cos(theta)) + KiZ * acc_error(5);
% U(2) = Ixx * [KpPhi KdPhi] * error(7:8) +  KiPhi * acc_error(7);
% U(3) = Iyy * [KpTheta KdTheta] * error(9:10) + KiTheta * acc_error(9);
% U(4) = Izz * [KpPsi KdPsi] * error(11:12) + KiPsi * acc_error(11);

U(1) = (m * g + m * [KpZ KdZ] * error(5:6)) / (cos(phi) * cos(theta)) + KiZ * acc_error(5);
U(2) = Ixx * [KpPhi KdPhi] * error(7:8) +  KiPhi * acc_error(7);
U(3) = Iyy * [KpTheta KdTheta] * error(9:10) + KiTheta * acc_error(9);
U(4) = Izz * [KpPsi KdPsi] * error(11:12) + KiPsi * acc_error(11);

if U(1) > 20
    U(1) = 20;
elseif U(1) < 0
    U(1) = 0;
end
for j = 2:4
    if abs(U(j)) > 0.1
        U(j) = 0.1 * sign(U(j));
    end
end

%% translate into omega
omega = zeros(4,1);
omega_square = allocation_matrix * U;
omega =  sqrt(omega_square);

omega(omega>omegaMax) = omegaMax;
omega(omega<omegaMin) = omegaMin;

end

